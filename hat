local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack

-- Cache
if not isfolder("APR") then makefolder("APR") end

local function gc()
	return LocalPlayer.Character or false
end

local function findtool(name)
	for _,v in pairs(Players:GetPlayers()) do
		for _,t in pairs(v.Backpack:GetChildren()) do
			if t.Name == name then
				return t
			end
		end
	end
end

local function SendMsg(str,hide)
    if hide then
        TextChatService.TextChannels.RBXSystem:SendAsync(str)
    else
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    end
end

local Window = ReGui:TabsWindow({
	Title = "APR | All Purpose Rabbit🐇",
	Size = UDim2.fromOffset(300, 200)
})

local tab1 = Window:CreateTab({Name="Main"})
local tab2 = Window:CreateTab({Name="Protection"})
local tab3 = Window:CreateTab({Name="Bkit"})


tab1:Label({Text="Update 17"})

local servs = tab1:Row()
servs:Label({Text="Join..."})
servs:Button({
	Text = " XL ",
	Callback = function()
		ReplicatedStorage.System:FireServer("xl")
	end,
})
servs:Button({
	Text = " VC ",
	Callback = function()
		ReplicatedStorage.JoinXL:FireServer("vc")
	end,
})
servs:Button({
	Text = " OG ",
	Callback = function()
		ReplicatedStorage.JoinXL:FireServer("og")
	end,
})

local arkc2
tab2:Checkbox({
	Value = false,
	Label = "Auto reset on enlighten",
	Callback = function(self, Value: boolean)
		if Value then
			arkc2 = LocalPlayer.CharacterAdded:Connect(function(char)char.ChildAdded:Connect(function(ins)
				if ins.Name == "The Arkenstone" then
					SendMsg("reset")
				end
			end)end)
			gc().ChildAdded:Connect(function(ins)
				if ins.Name == "The Arkenstone" then
					SendMsg("reset")
				end
			end)
		else
			if arkc2 then
				arkc2:Disconnect()
			end
		end
	end
})

local antiglitch
local charcon
tab2:Checkbox({
	Value = false,
	Label = "Anti glitch",
	Callback = function(self, Value: boolean)
		local char = gc()
		if Value and char and char:FindFirstChild("HumanoidRootPart") then
			charcon = LocalPlayer.CharacterAdded:Connect(function(cc)
				antiglitch = cc:WaitForChild("HumanoidRootPart"):GetPropertyChangedSignal("CFrame"):Connect(function()
					if cc.HumanoidRootPart.Position == Vector3.new(1234567,1234567,1234567) then
						cc.HumanoidRootPart.CFrame = CFrame.new(0,20,0)
					end
				end)
			end)
			antiglitch = char.HumanoidRootPart:GetPropertyChangedSignal("CFrame"):Connect(function()
				if char.HumanoidRootPart.Position == Vector3.new(1234567,1234567,1234567) then
					char.HumanoidRootPart.CFrame = CFrame.new(0,20,0)
				end
			end)
		else
			if antiglitch then
				antiglitch:Disconnect()
			end
			if charcon then
				charcon:Disconnect()
			end
		end
	end
})
local defheight = workspace.FallenPartsDestroyHeight
tab2:Checkbox({
	Value = false,
	Label = "Anti void",
	Callback = function(self, Value: boolean)
		workspace.FallenPartsDestroyHeight = Value and tonumber("nan") or defheight
	end
})


tab3:Button({
	Text = "Clear map",
	Callback = function()
        local h=LocalPlayer.Character.HumanoidRootPart
        for _,v in pairs(workspace.Bricks:GetDescendants()) do
            if v.Name == "Brick" then
                local args = {
                    v,
                    h.Position--v.Position+Vector3.new(0,v.Size.Y/2,0)
                }
                findtool("Delete"):WaitForChild("Script"):WaitForChild("Event"):FireServer(unpack(args))
                wait(.05)
            end
        end
	end,
})
tab3:Checkbox({
	Value = false,
	Label = "Disable bkit",
	Callback = function(self, Value: boolean)
		if Value then
			while Value do
				local h=LocalPlayer.Character.HumanoidRootPart
        		for _,v in pairs(workspace.Bricks:GetDescendants()) do
            		if v.Name == "Brick" then
                		local args = {
                    		v,
                    		h.Position--v.Position+Vector3.new(0,v.Size.Y/2,0)
                		}
						local tool = findtool("Delete")
						if tool then
                		tool:WaitForChild("Script"):WaitForChild("Event"):FireServer(unpack(args))
						end
                		wait(.05)
            		end
        		end
					wait(1)
			end	
		end
	end	
})
tab3:Button({
	Text = "Build Saver tool",
	Callback = function()
--------------------------------------------------------------------------------------------------------------------------------------------
local Tool = Instance.new("Tool")
do
	local part = Instance.new("Part")
	part.Size = Vector3.new(1,1,1)
	part.Color = Color3.new(1,1,1)
	part.Name = "Handle"
	part.Parent = Tool
end


local Player = game.Players.LocalPlayer
local Mouse = Player:GetMouse()
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

Tool.Parent = Player.Backpack
local firstPart, secondPart
local selectionBox
local copiedParts = nil
local copiedCenterCFrame
local copiedBottomOffset
local hologramFolder
local isPlacing = false
local currentCenterCFrame

-- Draw boundary selection box
local function showSelectionBox(cframe, size)
	if not selectionBox then
		selectionBox = Instance.new("Part")
		selectionBox.Name = "SelectionBoundingPart"
		selectionBox.Anchored = true
		selectionBox.CanCollide = false
		selectionBox.CanQuery = false
		selectionBox.CanTouch = false
		selectionBox.Transparency = 1
		selectionBox.Parent = workspace

		local adorn = Instance.new("SelectionBox")
		adorn.Adornee = selectionBox
		adorn.LineThickness = 0.05
		adorn.Color3 = Color3.fromRGB(0, 200, 150)
		adorn.Parent = selectionBox
	end

	selectionBox.Size = size
	selectionBox.CFrame = cframe

	-- auto destroy after 5 seconds
	task.delay(5, function()
		if selectionBox then
			selectionBox:Destroy()
			selectionBox = nil
		end
	end)
end

-- Handle tool activation (select 2 parts)
Tool.Activated:Connect(function()
	local target = Mouse.Target
	if target and target:IsA("BasePart") then
		if not firstPart then
			firstPart = target
		elseif not secondPart and target ~= firstPart then
			secondPart = target

			-- Compute bounding box
			local minVec = Vector3.new(
				math.min(firstPart.Position.X - firstPart.Size.X/2, secondPart.Position.X - secondPart.Size.X/2),
				math.min(firstPart.Position.Y - firstPart.Size.Y/2, secondPart.Position.Y - secondPart.Size.Y/2),
				math.min(firstPart.Position.Z - firstPart.Size.Z/2, secondPart.Position.Z - secondPart.Size.Z/2)
			)
			local maxVec = Vector3.new(
				math.max(firstPart.Position.X + firstPart.Size.X/2, secondPart.Position.X + secondPart.Size.X/2),
				math.max(firstPart.Position.Y + firstPart.Size.Y/2, secondPart.Position.Y + secondPart.Size.Y/2),
				math.max(firstPart.Position.Z + firstPart.Size.Z/2, secondPart.Position.Z + secondPart.Size.Z/2)
			)

			local size = maxVec - minVec
			local center = (minVec + maxVec) / 2
			local centerCFrame = CFrame.new(center)
			local bottomOffset = minVec.Y - center.Y

			-- Show bounding box
			showSelectionBox(centerCFrame, size)

			-- Collect parts fully inside the box
			copiedParts = {}
			copiedCenterCFrame = centerCFrame
			copiedBottomOffset = bottomOffset

			for _, obj in ipairs(workspace:GetDescendants()) do
				if obj:IsA("BasePart") and obj.Name ~= "SelectionBoundingPart" then
					local half = obj.Size / 2
					local aMin = obj.Position - half
					local aMax = obj.Position + half

					local inside = (
						aMin.X >= minVec.X and aMax.X <= maxVec.X and
							aMin.Y >= minVec.Y and aMax.Y <= maxVec.Y and
							aMin.Z >= minVec.Z and aMax.Z <= maxVec.Z
					)

					if inside then
						table.insert(copiedParts, {
							Size = obj.Size,
							RelCFrame = centerCFrame:ToObjectSpace(obj.CFrame)
						})
					end
				end
			end

			print("Copied", #copiedParts, "parts.")
			
			-- Encode to JSON
			local serializable = {}
			for _, info in ipairs(copiedParts) do
				table.insert(serializable, {
					Size = {info.Size.X, info.Size.Y, info.Size.Z},
					RelCFrame = {
						info.RelCFrame:GetComponents() -- returns 12 numbers (rotation + translation)
					}
				})
			end

			local json = HttpService:JSONEncode(serializable)
			print(json)

			
			-- Reset for next selection
			firstPart, secondPart = nil, nil
		end
	end
end)

-- Create hologram preview
local function createHologram()
	if hologramFolder then hologramFolder:Destroy() end
	hologramFolder = Instance.new("Folder")
	hologramFolder.Name = "HologramPreview"
	hologramFolder.Parent = workspace

	for _, info in ipairs(copiedParts) do
		local ghost = Instance.new("Part")
		ghost.Size = info.Size
		ghost.Anchored = true
		ghost.CanCollide = false
		ghost.CanQuery = false
		ghost.CanTouch = false
		ghost.Transparency = 0.5
		ghost.Material = Enum.Material.ForceField
		ghost.Color = Color3.fromRGB(0, 170, 255)
		ghost.CFrame = copiedCenterCFrame * info.RelCFrame
		ghost.Parent = hologramFolder
	end
end

-- Move hologram with mouse
RunService.RenderStepped:Connect(function()
	if isPlacing and hologramFolder and Mouse.Hit then
		local hitPos = Mouse.Hit.Position
		local snapPos = Vector3.new(
			math.floor(hitPos.X + 0.5),
			math.floor(hitPos.Y + 0.5),
			math.floor(hitPos.Z + 0.5)
		)

		-- Align bottom of region to ground
		snapPos = snapPos - Vector3.new(0, copiedBottomOffset, 0)

		currentCenterCFrame = CFrame.new(snapPos)

		for i, ghost in ipairs(hologramFolder:GetChildren()) do
			local info = copiedParts[i]
			if info then
				ghost.CFrame = currentCenterCFrame * info.RelCFrame
			end
		end
	end
end)

-- Toggle placement with V key
UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.V and copiedParts then
		if not isPlacing then
			isPlacing = true
			createHologram()
		else
			isPlacing = false
			if hologramFolder then
				-- Place real parts
				for _, info in ipairs(copiedParts) do
					local newPart = Instance.new("Part")
					newPart.Size = info.Size
					newPart.Anchored = true
					newPart.CFrame = currentCenterCFrame * info.RelCFrame
					newPart.Parent = workspace
				end
				hologramFolder:Destroy()
				hologramFolder = nil
			end
		end
	end
end)

-- Create mobile button
local function createMobileButton()
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "CloneBuildGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

	local button = Instance.new("TextButton")
	button.Name = "PlaceToggleButton"
	button.Size = UDim2.new(0, 100, 0, 50)
	button.Position = UDim2.new(1, -110, 1, -60) -- bottom right
	button.Text = "Place"
	button.BackgroundColor3 = Color3.fromRGB(0, 200, 150)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Font = Enum.Font.SourceSansBold
	button.TextSize = 20
	button.Parent = screenGui

	return button, screenGui
end

-- Attach button only when tool is equipped
Tool.Equipped:Connect(function()
	if UIS.TouchEnabled then
		if not game.Players.LocalPlayer.PlayerGui:FindFirstChild("CloneBuildGui") then
			local button, gui = createMobileButton()
			button.MouseButton1Click:Connect(function()
				if copiedParts then
					if not isPlacing then
						isPlacing = true
						createHologram()
					else
						isPlacing = false
						if hologramFolder then
							-- Place real parts
							for _, info in ipairs(copiedParts) do
								local newPart = Instance.new("Part")
								newPart.Size = info.Size
								newPart.Anchored = true
								newPart.CFrame = currentCenterCFrame * info.RelCFrame
								newPart.Parent = workspace
							end
							hologramFolder:Destroy()
							hologramFolder = nil
						end
					end
				end
			end)
		end
	end
end)

-- Remove GUI when tool is unequipped
Tool.Unequipped:Connect(function()
	local gui = game.Players.LocalPlayer.PlayerGui:FindFirstChild("CloneBuildGui")
	if gui then gui:Destroy() end
end)
--------------------------------------------------------------------------------------------------------------------------------------------
	end
})
local savedbuilds = tab3:CollapsingHeader({Title="Saved Builds"})
savedbuilds:Button({
	Text = "build 1",
	Callback = function()
        print("yup")
	end
})
savedbuilds:InputText({
    Label = "Load via JSON",
    Value = ""
})

--Popup
if not isfile("APR/HidePopup.txt")  then
local ModalWindow = Window:PopupModal({
	Title = "Credits"
}) --> Canvas

ModalWindow:Label({
	Text = "Script by doingbadlysofar, ReGui library by depthso",
	TextWrapped = true
})
ModalWindow:Separator()
local dsa = false
ModalWindow:Checkbox({
	Value = false,
	Label = "Don't show again",
	Callback = function(self, Value: boolean)
		dsa = Value
	end
})

local Row = ModalWindow:Row({
	Expanded = true
}) --> Canvas
Row:Button({
	Text = "Enter",
	Callback = function()
		if dsa then
			writefile("APR/HidePopup.txt","")
		end
		ModalWindow:ClosePopup()
	end,
})
end
